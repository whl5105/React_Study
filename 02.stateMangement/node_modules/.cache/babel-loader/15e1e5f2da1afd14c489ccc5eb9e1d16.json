{"ast":null,"code":"import { atom, selector } from \"recoil\";\nexport const todoListState = atom({\n  key: \"todoListState\",\n  default: []\n});\nexport const todoListFilterState = atom({\n  key: \"todoListFilterState\",\n  default: \"Show All\"\n});\nexport const filteredTodoListState = selector({\n  key: \"filteredTodoListState\",\n  get: _ref => {\n    let {\n      get\n    } = _ref;\n    const filter = get(todoListFilterState);\n    const list = get(todoListState);\n\n    switch (filter) {\n      case \"Show Completed\":\n        return list.filter(item => item.isComplete);\n\n      case \"Show Uncompleted\":\n        return list.filter(item => !item.isComplete);\n\n      default:\n        return list;\n    }\n  }\n});\nexport const todoListStatsState = selector({\n  key: \"todoListStatsState\",\n  get: _ref2 => {\n    let {\n      get\n    } = _ref2;\n    const todoList = get(todoListState);\n    const totalNum = todoList.length; // todo 항목들의 총개수\n\n    const totalCompletedNum = todoList.filter(item => item.isComplete).length; //완료된 todo 항목들의 총개수\n\n    const totalUncompletedNum = totalNum - totalCompletedNum; // 완료되지 않은 todo 항목들의 총개수\n\n    const percentCompleted = totalNum === 0 ? 0 : totalCompletedNum / totalNum; // 완료된 항목의 백분율\n\n    return {\n      totalNum,\n      totalCompletedNum,\n      totalUncompletedNum,\n      percentCompleted\n    };\n  }\n});","map":{"version":3,"sources":["/Users/choi-suin/Desktop/코딩 작업 /React_Study/stateMangement/recoil/src/components/Recoil/Todo/TodoStore.js"],"names":["atom","selector","todoListState","key","default","todoListFilterState","filteredTodoListState","get","filter","list","item","isComplete","todoListStatsState","todoList","totalNum","length","totalCompletedNum","totalUncompletedNum","percentCompleted"],"mappings":"AAAA,SAASA,IAAT,EAAeC,QAAf,QAA+B,QAA/B;AAEA,OAAO,MAAMC,aAAa,GAAGF,IAAI,CAAC;AAChCG,EAAAA,GAAG,EAAE,eAD2B;AAEhCC,EAAAA,OAAO,EAAE;AAFuB,CAAD,CAA1B;AAKP,OAAO,MAAMC,mBAAmB,GAAGL,IAAI,CAAC;AACtCG,EAAAA,GAAG,EAAE,qBADiC;AAEtCC,EAAAA,OAAO,EAAE;AAF6B,CAAD,CAAhC;AAKP,OAAO,MAAME,qBAAqB,GAAGL,QAAQ,CAAC;AAC5CE,EAAAA,GAAG,EAAE,uBADuC;AAE5CI,EAAAA,GAAG,EAAE,QAAa;AAAA,QAAZ;AAAEA,MAAAA;AAAF,KAAY;AAChB,UAAMC,MAAM,GAAGD,GAAG,CAACF,mBAAD,CAAlB;AACA,UAAMI,IAAI,GAAGF,GAAG,CAACL,aAAD,CAAhB;;AAEA,YAAQM,MAAR;AACE,WAAK,gBAAL;AACE,eAAOC,IAAI,CAACD,MAAL,CAAaE,IAAD,IAAUA,IAAI,CAACC,UAA3B,CAAP;;AACF,WAAK,kBAAL;AACE,eAAOF,IAAI,CAACD,MAAL,CAAaE,IAAD,IAAU,CAACA,IAAI,CAACC,UAA5B,CAAP;;AACF;AACE,eAAOF,IAAP;AANJ;AAQD;AAd2C,CAAD,CAAtC;AAiBP,OAAO,MAAMG,kBAAkB,GAAGX,QAAQ,CAAC;AACzCE,EAAAA,GAAG,EAAE,oBADoC;AAEzCI,EAAAA,GAAG,EAAE,SAAa;AAAA,QAAZ;AAAEA,MAAAA;AAAF,KAAY;AAChB,UAAMM,QAAQ,GAAGN,GAAG,CAACL,aAAD,CAApB;AACA,UAAMY,QAAQ,GAAGD,QAAQ,CAACE,MAA1B,CAFgB,CAEkB;;AAClC,UAAMC,iBAAiB,GAAGH,QAAQ,CAACL,MAAT,CAAiBE,IAAD,IAAUA,IAAI,CAACC,UAA/B,EAA2CI,MAArE,CAHgB,CAG6D;;AAC7E,UAAME,mBAAmB,GAAGH,QAAQ,GAAGE,iBAAvC,CAJgB,CAI0C;;AAC1D,UAAME,gBAAgB,GAAGJ,QAAQ,KAAK,CAAb,GAAiB,CAAjB,GAAqBE,iBAAiB,GAAGF,QAAlE,CALgB,CAK4D;;AAE5E,WAAO;AACLA,MAAAA,QADK;AAELE,MAAAA,iBAFK;AAGLC,MAAAA,mBAHK;AAILC,MAAAA;AAJK,KAAP;AAMD;AAfwC,CAAD,CAAnC","sourcesContent":["import { atom, selector } from \"recoil\";\n\nexport const todoListState = atom({\n  key: \"todoListState\",\n  default: [],\n});\n\nexport const todoListFilterState = atom({\n  key: \"todoListFilterState\",\n  default: \"Show All\",\n});\n\nexport const filteredTodoListState = selector({\n  key: \"filteredTodoListState\",\n  get: ({ get }) => {\n    const filter = get(todoListFilterState);\n    const list = get(todoListState);\n\n    switch (filter) {\n      case \"Show Completed\":\n        return list.filter((item) => item.isComplete);\n      case \"Show Uncompleted\":\n        return list.filter((item) => !item.isComplete);\n      default:\n        return list;\n    }\n  },\n});\n\nexport const todoListStatsState = selector({\n  key: \"todoListStatsState\",\n  get: ({ get }) => {\n    const todoList = get(todoListState);\n    const totalNum = todoList.length; // todo 항목들의 총개수\n    const totalCompletedNum = todoList.filter((item) => item.isComplete).length; //완료된 todo 항목들의 총개수\n    const totalUncompletedNum = totalNum - totalCompletedNum; // 완료되지 않은 todo 항목들의 총개수\n    const percentCompleted = totalNum === 0 ? 0 : totalCompletedNum / totalNum; // 완료된 항목의 백분율\n\n    return {\n      totalNum,\n      totalCompletedNum,\n      totalUncompletedNum,\n      percentCompleted,\n    };\n  },\n});\n"]},"metadata":{},"sourceType":"module"}